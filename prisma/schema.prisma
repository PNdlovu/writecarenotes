// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== Core Models =====
model User {
  id            String         @id @default(cuid())
  email         String        @unique
  password      String
  name          String?
  role          Role          @default(CARE_WORKER)
  organization  Organization  @relation(fields: [orgId], references: [id])
  orgId         String
  staff         Staff?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  sessions      Session[]
  auditLogs     AuditLog[]
}

model Organization {
  id            String        @id @default(cuid())
  name          String
  type          CareHomeType
  region        Region
  users         User[]
  residents     Resident[]
  staff         Staff[]
  carePlans     CarePlan[]
  incidents     Incident[]
  medications   Medication[]
  shifts        Shift[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Staff {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @unique
  organization  Organization  @relation(fields: [orgId], references: [id])
  orgId         String
  position      String
  department    String
  shifts        Shift[]
  shiftBids     ShiftBid[]
  qualifications Qualification[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Resident {
  id            String        @id @default(cuid())
  organization  Organization  @relation(fields: [orgId], references: [id])
  orgId         String
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  roomNumber    String?
  carePlan      CarePlan?
  medications   Medication[]
  incidents     Incident[]
  assessments   Assessment[]
  dietaryNeeds  DietaryNeed[]
  activities    Activity[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model CarePlan {
  id            String        @id @default(cuid())
  resident      Resident      @relation(fields: [residentId], references: [id])
  residentId    String        @unique
  organization  Organization  @relation(fields: [orgId], references: [id])
  orgId         String
  status        Status        @default(DRAFT)
  reviewDate    DateTime
  goals         Goal[]
  interventions Intervention[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Shift {
  id            String        @id @default(cuid())
  organization  Organization  @relation(fields: [orgId], references: [id])
  orgId         String
  name          String
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  staff         Staff[]
  bids          ShiftBid[]
  status        ShiftStatus   @default(OPEN)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ShiftBid {
  id            String        @id @default(cuid())
  shift         Shift         @relation(fields: [shiftId], references: [id])
  shiftId       String
  staff         Staff         @relation(fields: [staffId], references: [id])
  staffId       String
  notes         String?
  status        BidStatus     @default(PENDING)
  priority      Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Incident {
  id            String        @id @default(cuid())
  organization  Organization  @relation(fields: [orgId], references: [id])
  orgId         String
  resident      Resident      @relation(fields: [residentId], references: [id])
  residentId    String
  type          IncidentType
  description   String
  severity      Severity
  actions       String
  witnesses     String[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Medication {
  id            String        @id @default(cuid())
  organization  Organization  @relation(fields: [orgId], references: [id])
  orgId         String
  resident      Resident      @relation(fields: [residentId], references: [id])
  residentId    String
  name          String
  dosage        String
  frequency     String
  startDate     DateTime
  endDate       DateTime?
  instructions  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Assessment {
  id            String        @id @default(cuid())
  resident      Resident      @relation(fields: [residentId], references: [id])
  residentId    String
  type          AssessmentType
  date          DateTime
  score         Int?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Session {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  token         String        @unique
  expiresAt     DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model AuditLog {
  id            String        @id @default(cuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  action        String
  details       Json?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime      @default(now())
}

// ===== Enums =====
enum Role {
  SUPER_ADMIN
  REGISTERED_MANAGER
  DEPUTY_MANAGER
  REGISTERED_NURSE
  CARE_WORKER
  SAFEGUARDING_LEAD
  KEY_WORKER
  THERAPEUTIC_WORKER
  NIGHT_CARE_WORKER
}

enum CareHomeType {
  RESIDENTIAL_CARE
  NURSING_HOME
  CHILDRENS_HOME
  DUAL_REGISTERED
}

enum Region {
  ENGLAND
  WALES
  SCOTLAND
  BELFAST
  DUBLIN
}

enum Status {
  DRAFT
  PENDING_REVIEW
  APPROVED
  ARCHIVED
}

enum ShiftStatus {
  OPEN
  FILLED
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum IncidentType {
  FALL
  MEDICATION_ERROR
  BEHAVIORAL
  INJURY
  SAFEGUARDING
  OTHER
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AssessmentType {
  INITIAL
  MONTHLY
  QUARTERLY
  ANNUAL
  EMERGENCY
}

model Goal {
  id            String        @id @default(cuid())
  carePlan      CarePlan      @relation(fields: [carePlanId], references: [id])
  carePlanId    String
  description   String
  targetDate    DateTime
  status        Status        @default(DRAFT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Intervention {
  id            String        @id @default(cuid())
  carePlan      CarePlan      @relation(fields: [carePlanId], references: [id])
  carePlanId    String
  type          String
  description   String
  frequency     String
  responsible   String[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Qualification {
  id            String        @id @default(cuid())
  staff         Staff         @relation(fields: [staffId], references: [id])
  staffId       String
  name          String
  issuer        String
  dateObtained  DateTime
  expiryDate    DateTime?
  certificate   String?       // URL to stored certificate
  verified      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model DietaryNeed {
  id            String        @id @default(cuid())
  resident      Resident      @relation(fields: [residentId], references: [id])
  residentId    String
  type          String
  description   String
  allergies     String[]
  restrictions  String[]
  preferences   String[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Activity {
  id            String        @id @default(cuid())
  resident      Resident      @relation(fields: [residentId], references: [id])
  residentId    String
  name          String
  type          String
  description   String
  date          DateTime
  duration      Int          // in minutes
  participants  String[]
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}
