datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OnboardingStatus {
  INITIAL           // Just registered
  BASIC_INFO        // Added basic details
  CONTACT_INFO      // Added contact details
  REGISTRATION      // Added regulatory registration
  STAFF_INITIAL     // Added first staff member
  COMPLETE          // Completed basic onboarding
}

enum UserRole {
  SUPER_ADMIN       // Organization-level admin
  FACILITY_ADMIN    // Facility/Care home manager
  STAFF            // Care home staff
  NURSE            // Medical staff
}

enum SubscriptionTier {
  STARTER          // 1 facility, up to 20 residents
  GROWTH           // Up to 3 facilities, up to 50 residents each
  ENTERPRISE       // Unlimited facilities, unlimited residents
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  TRIALING
}

enum RegulatoryBody {
  CQC              // Care Quality Commission (England)
  CIW              // Care Inspectorate Wales
  CI               // Care Inspectorate (Scotland)
  RQIA             // Regulation and Quality Improvement Authority (Northern Ireland)
  HIQA             // Health Information and Quality Authority (Ireland)
  OFSTED           // Office for Standards in Education (England)
}

enum FacilityType {
  NURSING_HOME
  RESIDENTIAL_HOME
  SUPPORTED_LIVING
  CHILDRENS_HOME
  SPECIALIST_COLLEGE
  RETIREMENT_VILLAGE
  LEARNING_DISABILITY
  MENTAL_HEALTH
  OTHER
}

enum Region {
  england
  wales
  scotland
  belfast
  dublin
}

// Top-level organization (company/group that owns care homes)
model Organization {
  id            String           @id @default(cuid())
  name          String
  type          String          // e.g., "CARE_GROUP", "INDEPENDENT"
  status        String          @default("ACTIVE")
  address       Json?           // Head office address
  contactPhone  String?         // Main contact number
  contactEmail  String?         // Main contact email
  website       String?
  settings      Json            @default("{}")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Subscription fields
  subscriptionTier SubscriptionTier @default(STARTER)
  subscriptionStatus SubscriptionStatus @default(TRIALING)
  trialEndsAt    DateTime?
  subscriptionId String?           // External subscription ID (e.g., Stripe)
  
  users         User[]          @relation("OrganizationToUser")
  staff         Staff[]         @relation("OrganizationToStaff")
  facilities    Facility[]      // Care homes owned by this organization
  documents     Document[]      // Organization-level documents
  subscriptionHistory SubscriptionHistory[]

  @@index([name])
}

// Individual care home/facility
model Facility {
  id            String           @id @default(cuid())
  name          String
  type          FacilityType
  status        String          @default("ACTIVE")
  onboarding    OnboardingStatus @default(INITIAL)
  
  // Regulatory information
  regulatoryBody RegulatoryBody
  registrationNumber String?    // CQC/CIW/CI/RQIA/HIQA number
  lastInspectionDate DateTime?
  rating         String?        // Latest inspection rating
  
  // Facility details
  capacity      Int?            // Number of beds
  address       Json?           // Facility address
  contactPhone  String?         // Facility contact number
  contactEmail  String?         // Facility contact email
  
  // Relationships
  organization  Organization    @relation(fields: [organizationId], references: [id])
  organizationId String
  staff         Staff[]        // Staff assigned to this facility
  residents     Resident[]     // Residents in this facility
  documents     Document[]     // Facility-specific documents
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([organizationId])
  @@index([name])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String       @id @default(cuid())
  name              String?
  email             String?      @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?      // Add this
  resetToken        String?      @unique // Add this
  resetTokenExpiry  DateTime?    // Add this
  pin               String?      // Keep existing
  requirePINChange  Boolean      @default(false)
  role              UserRole     @default(STAFF)
  organization      Organization? @relation("OrganizationToUser", fields: [organizationId], references: [id])
  organizationId    String?
  accounts          Account[]    // Add this
  sessions          Session[]    // Add this
  staff             Staff?
  activityLogs      ActivityLog[]
  residentNotes     ResidentNote[]
  notifications     Notification[] // Add this

  @@index([organizationId])
}

// Demo requests from potential customers
model DemoRequest {
  id            String    @id @default(cuid())
  firstName     String
  jobTitle      String
  workEmail     String
  status        String    // PENDING, SCHEDULED, COMPLETED, CANCELLED
  requestedAt   DateTime  @default(now())
  scheduledFor  DateTime?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([workEmail])
  @@index([status])
}

model Staff {
  id            String      @id @default(cuid())
  userId        String      @unique
  position      String
  department    String?
  startDate     DateTime    @default(now())
  status        String      @default("ACTIVE")
  organization  Organization @relation("OrganizationToStaff", fields: [organizationId], references: [id])
  organizationId String
  facility      Facility?   @relation(fields: [facilityId], references: [id])
  facilityId    String?
  user          User        @relation(fields: [userId], references: [id])
  region        Region
  cqcNumber     String?    // England - CQC
  scwNumber     String?    // Wales - Social Care Wales
  ssscNumber    String?    // Scotland - SSSC
  nisccNumber   String?    // Belfast - NISCC
  coruNumber    String?    // Dublin - CORU
  dbsNumber     String?    // England/Wales - DBS
  pvgNumber     String?    // Scotland - PVG
  accessniNumber String?    // Belfast - AccessNI
  gardaNumber   String?    // Dublin - Garda Vetting
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([organizationId])
  @@index([facilityId])
}

model Resident {
  id            String      @id @default(cuid())
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  roomNumber    String?
  admissionDate DateTime    @default(now())
  facility      Facility    @relation(fields: [facilityId], references: [id])
  facilityId    String
  notes         ResidentNote[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  medications   Medication[]

  @@index([facilityId])
}

model Document {
  id            String      @id @default(cuid())
  name          String
  type          String
  url           String
  organization  Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  facility      Facility?   @relation(fields: [facilityId], references: [id])
  facilityId    String?
  searchVector  Unsupported("tsvector")?  // We'll handle this with a trigger instead
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([organizationId])
  @@index([facilityId])
}

model ResidentNote {
  id          String    @id @default(cuid())
  content     String
  resident    Resident  @relation(fields: [residentId], references: [id])
  residentId  String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([residentId])
  @@index([authorId])
}

model ActivityLog {
  id            String    @id @default(cuid())
  action        String
  details       Json
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())

  @@index([userId])
}

model SubscriptionHistory {
  id            String           @id @default(cuid())
  organization  Organization     @relation(fields: [organizationId], references: [id])
  organizationId String
  plan          SubscriptionTier
  status        SubscriptionStatus
  startDate     DateTime
  endDate       DateTime?
  amount        Float
  currency      String          @default("GBP")
  metadata      Json?
  createdAt     DateTime        @default(now())

  @@index([organizationId])
}

model Medication {
  id              String      @id @default(cuid())
  name            String
  residentId      String
  resident        Resident    @relation(fields: [residentId], references: [id])
  prescriptions   Prescription[]
  administrations Administration[]
  stock           MedicationStock?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Prescription {
  id            String      @id @default(cuid())
  medicationId  String
  medication    Medication  @relation(fields: [medicationId], references: [id])
  dosage        String
  frequency     String
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Administration {
  id            String      @id @default(cuid())
  medicationId  String
  medication    Medication  @relation(fields: [medicationId], references: [id])
  givenBy       String
  givenAt       DateTime
  dosage        String
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model MedicationStock {
  id            String      @id @default(cuid())
  medicationId  String      @unique
  medication    Medication  @relation(fields: [medicationId], references: [id])
  quantity      Int
  unit          String
  reorderLevel  Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email, code])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Regulatory reporting
model RegulatoryReport {
  id                String          @id @default(cuid())
  facilityId        String
  facility          Facility        @relation(fields: [facilityId], references: [id])
  type              String
  subtype           String?
  details           Json
  timestamp         DateTime
  severity          String
  status            String
  regulatoryBody    String
  submissionDeadline DateTime
  submittedAt       DateTime?
  notifications     Notification[]
  followUpTasks     FollowUpTask[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([facilityId])
  @@index([type])
  @@index([status])
}

model Notification {
  id          String          @id @default(cuid())
  facilityId  String
  facility    Facility        @relation(fields: [facilityId], references: [id])
  reportId    String?
  report      RegulatoryReport? @relation(fields: [reportId], references: [id])
  role        String
  message     String
  deadline    DateTime
  status      String
  readAt      DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([facilityId])
  @@index([reportId])
  @@index([status])
}

model FollowUpTask {
  id          String          @id @default(cuid())
  reportId    String
  report      RegulatoryReport @relation(fields: [reportId], references: [id])
  type        String
  description String
  deadline    DateTime
  status      String
  completedAt DateTime?
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([reportId])
  @@index([status])
}

// Specialized care
model SpecializedCare {
  id          String   @id @default(cuid())
  facilityId  String
  facility    Facility @relation(fields: [facilityId], references: [id])
  type        String
  startDate   DateTime
  endDate     DateTime?
  requirements Json
  staffing    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([facilityId])
  @@index([type])
}

// Regional settings
model RegionalSettings {
  id              String   @id @default(cuid())
  facilityId      String   @unique
  facility        Facility @relation(fields: [facilityId], references: [id])
  regulatoryBody  String
  language        String
  currency        String
  timeZone        String
  requirements    Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([facilityId])
}

// Monitoring events
model MonitoringEvent {
  id          String   @id @default(cuid())
  facilityId  String
  facility    Facility @relation(fields: [facilityId], references: [id])
  type        String
  subtype     String?
  value       String
  timestamp   DateTime
  metadata    Json?
  status      String
  message     String?
  alerts      Alert[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([facilityId])
  @@index([type])
  @@index([timestamp])
}

model Alert {
  id              String          @id @default(cuid())
  facilityId      String
  facility        Facility        @relation(fields: [facilityId], references: [id])
  eventId         String?
  event           MonitoringEvent? @relation(fields: [eventId], references: [id])
  type            String
  severity        String
  message         String
  metadata        Json?
  status          String
  acknowledgedAt  DateTime?
  resolvedAt      DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([facilityId])
  @@index([eventId])
  @@index([status])
}

// Validation logs
model ValidationLog {
  id          String   @id @default(cuid())
  facilityId  String
  facility    Facility @relation(fields: [facilityId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String
  result      Boolean
  details     Json
  createdAt   DateTime @default(now())

  @@index([facilityId])
  @@index([userId])
  @@index([type])
}
